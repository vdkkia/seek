<%=javascript_include_tag('jquery-ui.min.js')%>
<%=javascript_include_tag('panzoom.js')%>
<%=javascript_include_tag('wheel.js')%>
<%=javascript_include_tag('jquery.flowchart.js')%>

<%= stylesheet_link_tag 'application', 'jquery.flowchart.css' %>
<%# <link rel="stylesheet" href=" https://fonts.googleapis.com/css?family=Archivo+Narrow&display=swap"> %>
<div id="content-wrapper">
    <div class="inner">
        <div class="flowchart-example" style="overflow-x:scroll">
            <div class="flowchart-example-container" id="chart_canvas">
                <div id="operator_properties" style="display: none;">
                    <label for="operator_title">Change title: </label><input style="margin-bottom:10px" type="text"
                        id="operator_title" class="form-control">
                    <a href="javascript:void(0);" class="delete_selected_button"><i
                            class="glyphicon glyphicon-minus-sign"></i> Delete item</a>

                    <a style="position:absolute;top:5px;right:5px" href="javascript:void(0);"
                        onclick="$j('#operator_properties').hide()"><i class="glyphicon glyphicon-remove"></i></a>

                </div>
            </div>
        </div>
        <div class="draggable_operators" style="font-size:12px">
            <div style="float:left;margin-right:20px">
                <span style="color:#888"><i class="glyphicon glyphicon-info-sign"></i> Set input and output count of
                    items:</span><br />
                <div class="form-inline">
                    Inputs: <input id="inputs_num" type="number" class="form-control" style="width:50px;font-size:12px"
                        value="1" min="0" max="3"> &nbsp;
                    Outputs: <input id="outputs_num" type="number" class="form-control"
                        style="width:50px;font-size:12px" value="1" min="0" max="3">
                </div>
            </div>
            <div class="draggable_operators_divs">
                <span style="color:#888"><i class="glyphicon glyphicon-info-sign"></i> Drag & drop these items to
                    the canvas:</span><br />
                <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn" data-nb-inputs="1"
                    data-nb-outputs="1" data-shape='rectangle' data-shape_id='na'><i
                        class="glyphicon glyphicon-move"></i>Method</div>
                <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn" data-nb-inputs="1"
                    data-nb-outputs="1" data-shape='parallelogram' data-shape_id='na'><i
                        class="glyphicon glyphicon-move"></i>Input/Output</div>

            </div>

              <div style="text-align:center">
                    <h2></h2>
                    <a class="btn btn-primary" id="btn_save_workflow">Save</a>
                </div>
            <br />
        </div>
    </div>
    <style>
        #operator_properties {
            position: absolute;
            background-color: white;
            opacity: 0.9;
            border-radius: 5px;
            border: 2px solid #bbb;
            z-Index: 999;
            font-size: 12px;
            -webkit-box-shadow: 0px 0px 32px -5px rgba(0, 0, 0, 0.75);
            -moz-box-shadow: 0px 0px 32px -5px rgba(0, 0, 0, 0.75);
            box-shadow: 0px 0px 32px -5px rgba(0, 0, 0, 0.75);
        }

        #operator_properties input {
            font-size: 12px
        }

        .badge {
            transition: all 200ms ease-in-out;
        }
    </style>
</div>

<script type="text/javascript">
    function init_workflow() {
        var $flowchart = $j('#chart_canvas');
        var $container = $flowchart.parent();
        var cx = $flowchart.width() / 2;
        var cy = $flowchart.height() / 2;
        var currentZoom = 0.5;
        // Apply the plugin on a standard, empty div...
        var $operatorProperties = $j('#operator_properties');
        var $linkProperties = $j('#link_properties');
        var $operatorTitle = $j('#operator_title');
        var $linkColor = $j('#link_color');
        $flowchart.flowchart({
            onOperatorSelect: function (operatorId) {
                $operatorProperties.show();
                $operatorTitle.val($flowchart.flowchart('getOperatorTitle', operatorId));
                $operatorProperties.css('position', 'absolute');
                $operatorProperties.css("left", this.data.operators[operatorId].left - 28);
                $operatorProperties.css("top", this.data.operators[operatorId].top - 42);
                return true;
            },
            onOperatorUnselect: function () {
                // $operatorProperties.hide();
                // return true;
            },
            onLinkSelect: function (linkId) {
                $linkProperties.show();
                $linkColor.val($flowchart.flowchart('getLinkMainColor', linkId));
                return true;
            },
            onLinkUnselect: function () {
                $linkProperties.hide();
                return true;
            }
        });

        $operatorTitle.keyup(function () {
            var selectedOperatorId = $flowchart.flowchart('getSelectedOperatorId');
            if (selectedOperatorId != null) {
                $flowchart.flowchart('setOperatorTitle', selectedOperatorId, $operatorTitle
                    .val());
            }
        });
        $j('.delete_selected_button').click(function () {
            $flowchart.flowchart('deleteSelected');
            $j('#operator_properties').hide()
        });
        var $draggableOperators = $j('.draggable_operator');

        function getOperatorData($element) {
            const nbInputs = parseInt($element.data('nb-inputs'));
            const nbOutputs = parseInt($element.data('nb-outputs'));
            var data = {
                properties: {
                    title: $element.text(),
                    inputs: {},
                    outputs: {},
                    shape: $element.data('shape'),
                    shape_id: $element.data('shape_id'),
                },
            };
            var i = 0;
            for (i = 0; i < nbInputs; i++) {
                data.properties.inputs['input_' + i] = {
                    label: 'Input ' + (i + 1)
                };
            }
            for (i = 0; i < nbOutputs; i++) {
                data.properties.outputs['output_' + i] = {
                    label: 'Output ' + (i + 1)
                };
            }
            return data;
        }
        var operatorId = 0;
        $draggableOperators.draggable({
            cursor: "move",
            opacity: 0.7,
            helper: 'clone',
            appendTo: 'body',
            zIndex: 1000,
            helper: function (e) {
                var $this = $j(this);
                var data = getOperatorData($this);
                return $flowchart.flowchart('getOperatorElement', data);

            },
            stop: function (e, ui) {
                var $this = $j(this);
                var elOffset = ui.offset;
                var containerOffset = $container.offset();
                if (elOffset.left > containerOffset.left &&
                    elOffset.top > containerOffset.top &&
                    elOffset.left < containerOffset.left + $container.width() &&
                    elOffset.top < containerOffset.top + $container.height()) {
                    var flowchartOffset = $flowchart.offset();
                    var relativeLeft = elOffset.left - flowchartOffset.left;
                    var relativeTop = elOffset.top - flowchartOffset.top;
                    var positionRatio = $flowchart.flowchart('getPositionRatio');
                    relativeLeft /= positionRatio;
                    relativeTop /= positionRatio;
                    var data = getOperatorData($this);
                    data.left = relativeLeft;
                    data.top = relativeTop;
                    $flowchart.flowchart('addOperator', data);
                }
            }
        });
    }

    $j('html').keyup(function (e) {
        if (e.keyCode == 46) {
            Delete()
        }
    });

    function Delete() {
        $j('#chart_canvas').flowchart('deleteSelected');
    }

    function loadWorkflow(data) {

        var $flowchart = $j('#chart_canvas');
        if (!data) {
            $flowchart.flowchart('setData', "");
        } else {
            $flowchart.flowchart('setData', data);
        }
    }

    function extractMethods(data) {
        let methods = [];
        // if the workflow has method box
        $j.map(data.operators, (operator) => {
            if (operator.properties.shape === "rectangle") {
                methods.push(operator.properties.title)
            }
        })
        return methods
    }

    function extractSamples(data) {
        if (Object.keys(data.operators) == 0)
            return []
        let TableNames = [];
        let TableopIndexes = [];
        // if the workflow has TBL box
        $j.map(data.operators, (operator, index) => {
            if (operator.properties.shape === "parallelogram") {
                TableopIndexes.push(index);
            }
        })
        let FirstBox = findFirstBox(TableopIndexes, data.links);
        let arrenged = arrangeBoxes(data.operators, FirstBox, data.links)
        $j.map(arrenged, (operator, index) => {
            if (operator.properties.shape === "parallelogram") {
                TableNames.push({
                    'id': operator.properties.shape_id == "na" ? uniqId() : operator.properties
                        .shape_id,
                    'title': operator.properties.title,
                    'content': ''
                });
            }
        })
        return TableNames
    }

    function findFirstBox(operatorsIndexes, links) {
        let temp, result, g
        $j.each(operatorsIndexes, (op_key, op_val) => {
            temp = false;
            $j.each(links, (link_key, link_val) => {
                if (link_val.toOperator.toString() == op_val)
                    temp = true;
            })
            if (!temp) {
                result = op_val;
                return result
            }
        })
        return result
    }

    function arrangeBoxes(OpList, firstBoxId, links) {
        let arranged = [],
            current = firstBoxId;
        arranged.push(OpList[current])
        for (let i = 0; i < Object.keys(links).length; i++) {
            $j.each(links, (key, link) => {
                if (link.fromOperator == current) {
                    arranged.push(OpList[link.toOperator])
                    current = link.toOperator
                    return false
                }
            })
        }
        return arranged
    }

    function connectedSamples(methodName, data) {
        let operatorId, inputId, outputId
        $j.each(data.operators, (op_key, op_val) => {
            if (op_val.properties.title == methodName) {
                operatorId = op_key;
                return false;
            }
        })
        $j.each(data.links, (link_key, link_val) => {
            if (link_val.fromOperator == operatorId)
                outputId = link_val.toOperator
            if (link_val.toOperator == operatorId)
                inputId = link_val.fromOperator
        })
        return {
            "input": getOperatorName(inputId, data),
            "output": getOperatorName(outputId, data)
        }
    }

    function getOperatorName(operatorId, data) {
        let opName
        $j.each(data.operators, (op_key, op_val) => {
            if (op_key == operatorId)
                opName = op_val.properties.title
        })
        return opName
    }

    function getSampleId(sampleName, sampleList) {
        let res
        $j.each(sampleList, (i, sample) => {
            if (sample.title == sampleName)
                res = sample.id
        })
        return res
    }

    $j('#inputs_num').on('input', function (e) {
        let num = $j(this).val();
        if (num >= 0 && num < 4)
            $j('.wf_btn').data('nb-inputs', num);
    });

    $j('#outputs_num').on('input', function (e) {
        let num = $j(this).val();
        if (num >= 0 && num < 4)
            $j('.wf_btn').data('nb-outputs', num);
    });

    function load_method(std_id, asy_id) {
        let base = $j(".fileManager");
        $j('.fileManager li:not(:last-child)').remove();
        base.not(':last').remove()
        $j.ajax({
            type: 'GET',
            url: pid + '/method',
            cache: false,
            data: {
                std_id
            },
            success: result => {
                if (!result) {
                    base.empty()
                    base.append("<li>Error!</li>")
                    return
                }
                result = JSON.parse(result.data)
                if (result.length > 0) {
                    result.forEach(function (assay) {
                        if (assay.id == asy_id) {
                            addFile(`${std_id}_${asy_id}_method`, file_icon('.txt'), minify(
                                assay.method.title))
                        }
                    })
                } else {
                    base.prepend('<li>empty</li>')
                }
            }
        })
    }

    function load_samples(std_id, asy_id) {
        let base = $j(".fileManager");
        $j('.fileManager li:not(:last-child)').remove();
        base.not(':last').remove()
        $j.ajax({
            type: 'GET',
            cache: false,
            url: pid + '/samples',
            data: {
                std_id,
                asy_id
            },
            success: result => {
                if (!result) {
                    base.empty()
                    base.append("<li>Error!</li>")
                    return
                }
                //result = JSON.parse(result.data)
                if (result.data.length > 0) {
                    result.data.reverse().forEach(function (sample) {
                        addFile(`${std_id}_${sample.id}_sample`, file_icon('.tbl'),
                            minify(sample.title))
                    })
                } else {
                    base.prepend('<li>empty</li>')
                }
            }
        })
    }

    function refreshWorkflow() {
        setTimeout(() => {
            $j('#chart_canvas').flowchart('redrawLinksLayer')
        }, 250);
    }

    function validateWorkflow(data) {
        // Check for name duplication
        let operatorLength = Object.keys(data.operators).length
        if (operatorLength == 0) return true
        if (operatorLength - Object.keys(data.links).length != 1) {
            alert("Boxes are not connected correctly!")
            return false;
        }
        // // Always 2 baxes with only 1 link
        // let ioBoxes = 0,
        //     connections = 0
        // $j.each(data.operators, (op_key, op_val) => {
        //     $j.each(data.links, (link_key, link_val) => {
        //         if (link_val.toOperator == op_key ||
        //             link_val.fromOperator == op_key)
        //             connections++
        //     })
        //     if (connections == 1) {
        //         ioBoxes++;
        //     }
        //     connections = 0

        // })
        // if (ioBoxes != 2) {
        //     alert("Boxes are not connected correctly!")
        //     return false;
        // }
        let TableopIndexes = [];
        $j.map(data.operators, (operator, index) => {
           // if (operator.properties.shape === "parallelogram") {
                TableopIndexes.push(index);
           // }
        })

        let first = findFirstBox(TableopIndexes, data.links)
        if (data.operators[first].properties.shape != "parallelogram") {
            alert("First Box must be an Input box!")
            return false;
        }
        let names = [],
            nameValid = true
        $j.each(data.operators, (op_key, op_val) => {
            names.push(op_val.properties.title)
        })
        $j.each(names, (id, val) => {
            $j.each(names, (i, v) => {
                if (i != id && val == v) {
                    alert("Duplicate names detected!")
                    nameValid = false;
                    return false
                }
            })
            if (!nameValid)
                return false
        })
        if (nameValid)
            return true
        else
            return false
    }
</script>