<%=javascript_include_tag('jquery-ui.min.js')%>
<%=javascript_include_tag('panzoom.js')%>
<%=javascript_include_tag('wheel.js')%>
<%=javascript_include_tag('jquery.flowchart.js')%>

<%= stylesheet_link_tag 'application', 'jquery.flowchart.css' %>
<%# <link rel="stylesheet" href=" https://fonts.googleapis.com/css?family=Archivo+Narrow&display=swap"> %>
<div id="content-wrapper">
    <div class="inner">
        <div class="flowchartex" style="overflow-x:scroll">
            <div class="flowchartex-container" id="chart_canvas">
                <div id="operator_properties" class="workflowPopup">
                    <label for="operator_title">Change title: </label><input style="margin-bottom:10px" type="text"
                        id="operator_title" class="form-control">
                    <a href="javascript:void(0);" class="delete_selected_button"><i
                            class="glyphicon glyphicon-minus-sign"></i> Delete item</a>

                    <a class="pgclose" href="javascript:void(0);" onclick="$j('#operator_properties').hide()"><i
                            class="glyphicon glyphicon-remove"></i></a>

                </div>
            </div>
        </div>
        <div class="draggable_operators" style="font-size:12px">
            <div style="float:left;margin-right:20px">
                <span style="color:#888"><i class="glyphicon glyphicon-info-sign"></i> Set input and output count of
                    items:</span><br />
                <div class="form-inline">
                    Inputs: <input id="inputs_num" type="number" class="form-control" style="width:50px;font-size:12px"
                        value="1" min="0" max="3"> &nbsp;
                    Outputs: <input id="outputs_num" type="number" class="form-control"
                        style="width:50px;font-size:12px" value="1" min="0" max="3">
                </div>
            </div>
            <div class="draggable_operators_divs">
                <span style="color:#888"><i class="glyphicon glyphicon-info-sign"></i> Drag & drop these items to
                    the canvas:</span><br />
                <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn" data-nb-inputs="1"
                    data-nb-outputs="1" data-shape='rectangle' data-shape_id='na'>Assay</div>
            </div>

            <div style="text-align:center">
                <h2></h2>
                <a class="btn btn-primary" id="btn_save_workflow">Save</a>
            </div>
            <br />
        </div>
    </div>


    <div id="assayInfo" class="modal in">
        <div class="modal-dialog modal-m">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close" data-dismiss="modal"><span aria-hidden="true">Ã—</span></button>
                    <h4 class="modal-title">Assay</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div>
                            <label>Title:</label>
                            <input style="margin-bottom:10px" type="text" class="form-control" id="assayTitle">
                        </div>
                        <div style="display:inline-block">
                            <div class="cdiv">
                                <label>Type:</label>
                                <select class="form-control" id="assayType" onchange="asyTypeChange(this);">
                                    <input type="hidden" id="method_type">
                                </select>
                            </div>
                            <div class="cdiv">
                                <label>Attributes:</label>
                                <ul id="attribs" class="small_list"></ul>
                            </div>
                        </div>
                        <div><label>Description: </label>
                            <textarea id="assayDes" class="form-control"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input id="btnSaveAssay" type="button" value="Save" class="btn btn-primary" data-dismiss="modal" />
                    <input id="btnCancelAssay" type="button" value="Cancel" class="btn btn-default"
                        data-dismiss="modal" />
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    let methodTypes = [{
            title: 'Custom',
            attributes: []
        }, {
            title: 'ENA library Information',
            attributes: [{
                    title: 'ENA_lib Library Layout',
                    ontology: ['SINGLE', 'PAIRED']
                },
                {
                    title: 'ENA_lib Library Source',
                    ontology: ['GENOMIC (Genomic DNA (includes PCR products from genomic DNA))',
                        'TRANSCRIPTOMIC (Transcription products or non genomic DNA (EST, cDNA, RT-PCR, screened libraries)',
                        'TRANSCRIPTOMIC SINGLE CELL', 'METAGENOMIC (Mixed material from metagenome)',
                        'METATRANSCRIPTOMIC (Transcription products from community targets)',
                        'SYNTHETIC (Synthetic DNA)', 'VIRAL RNA (Viral RNA)',
                        'OTHER (Other, unspecified, or unknown source material)'
                    ]
                },
                {
                    title: 'ENA_lib Library Strategy',
                    ontology: [
                        'RNA-Seq (Random sequencing of whole transcriptome, also known as Whole Transcriptome Shotgun Sequencing, or WTSS. (see pubmed 18611170 for details))',
                        'ATAC-seq (Assay for Transposase-Accessible Chromatin (ATAC) strategy is used to study genome-wide chromatin accessibility. Alternative method to Dnase-seq that uses en engineered Tn5)',
                        'ChIP-Seq (Direct sequencing of chromatin immunoprecipitates)',
                        'Bisulfite-Seq (Sequencing following treatment of DNA with bisulfite to cnvert cytosine residues to uracil depending on methylation status)',
                        'MeDIP-Seq (Methylated DNA Immunoprecipitation Sequencing)',
                        'FAIRE-seq (Formaldehyde-Assisted Isolation of Regulatory Elements. Reveals regions of open chromatin)',
                        'RIP-Seq (Direct sequencing of RNA immunoprecipitates (includes CLIP-Seq, HITS-CLIP and PAR-CLI))',
                        'ChIA-PET (Direct sequencing of proximity-ligated chromatin immunoprecipitates)',
                        'OTHER (Library strategy not listed)'
                    ]
                },
                {
                    title: 'ENA_lib Library Selection',
                    ontology: ['RANDOM (Random selection by sharing or other method)',
                        'PCR (Source material was selected by designed primers)',
                        'RANDOM PCR (Source material eas selected by randomly generated primers)',
                        'RT-PCR (Source material was selected by reverse transcription PCR)',
                        'cDNA_randomPriming',
                        'PolyA (PolyA selection or enrichment for messanger RNA (mRNA))',
                        'Oligo-dT (enrichment of messanger RNA (mRNA) by hybridization to Oligo-dT)',
                        'ChIP (Chromatin immunoprecipitation)',
                        'DNase (DNase I endonuclease digestion and size selection reveals regions of chromatin where the DNA is highly sensitive',
                        'to Dnase I)',
                        'Reduced Representation (Reproducible genomic subsets, often generated by restriction fragment size selection, containing',
                        'a manageable number of loci to facilitate re-sampling)',
                        'Restriction Digest (DNA fraction using restriction enzymes)',
                        '5-methylcytidine antibody (Selection of methylated DNA fragments using an antibody raised against 5-methylcytosine or',
                        '5-methylcytidine (m5C))',
                        'other (Other library enrichment, screening, or selection process)',
                        'unspecified (library enrichment, screening, or selection is not specified)',
                    ]
                },
                {
                    title: 'ENA_lib Library Strand',
                    ontology: ['not applicable',
                        'first strand',
                        'second strand'
                    ]
                }
            ]
        },
        {
            title: 'Sample_Requirements_RNA',
            attributes: [{
                    title: 'RNA UNIQUE SAMPLE NUMBER',
                    ontology: []
                }, {
                    title: 'RNA SAMPLE NAME',
                    ontology: []
                }, {
                    title: 'RNA CONC (ng/ul)',
                    ontology: []
                }, {
                    title: 'RNA OD 260/280',
                    ontology: []
                }, {
                    title: 'RNA OD 260/230',
                    ontology: []
                }, {
                    title: 'RNA RIN',
                    ontology: []
                },
                {
                    title: 'RNA VOLUME (ul)',
                    ontology: []
                },
                {
                    title: 'RNA SOLVENT',
                    ontology: ['Nuclease-free water',
                        'DEPC-MQ',
                        'Elution Buffer',
                        'TE (1x)',
                        'Low TE',
                        'BR5',
                        'Other'
                    ]
                },
                {
                    title: 'RNA ORGANISM',
                    ontology: []
                }
            ]
        },
        {
            title: 'Sample_Requirements_Library',
            attributes: [{
                title: 'Lib UNIQUE SAMPLE NUMBER',
                ontology: []
            }, {
                title: 'Lib LIBRARY/POOL NAME/NUMBER',
                ontology: []
            }, {
                title: 'Lib LIBRARY PREP METHOD',
                ontology: []
            }, {
                title: 'Lib CONC (ng/ul)',
                ontology: []
            }, {
                title: 'Lib VOLUME (ul)',
                ontology: []
            }, {
                title: 'Lib SOLVENT',
                ontology: ['Nuclease-free water',
                    'DEPC-MQ',
                    'Elution Buffer',
                    'TE (1x)',
                    'Low TE',
                    'BR5',
                    'Other'
                ]
            }, {
                title: 'SIZE RANGE (bp)',
                ontology: []
            }, {
                title: 'AVERAGE LENGTH (bp)',
                ontology: []
            }, {
                title: 'MOLARITY',
                ontology: []
            }, {
                title: 'ILLUMINA SEQ KIT',
                ontology: []
            }, {
                title: 'RUN TYPE',
                ontology: ['single reads',
                    'paired reads'
                ]
            }, {
                title: 'ORGANISM',
                ontology: []
            }, {
                title: 'BARCODE NUMBER (p7)',
                ontology: []
            }, {
                title: 'BARCODE NUMBER (p5)',
                ontology: []
            }]
        }, {
            title: 'Sample_Requirements_DNA',
            attributes: [{
                title: 'UNIQUE SAMPLE NUMBER',
                ontology: []
            }, {
                title: 'SAMPLE NAME',
                ontology: []
            }, {
                title: 'CONC (ng/ul)',
                ontology: []
            }, {
                title: 'VOLUME (ul)',
                ontology: []
            }, {
                title: 'SOLVENT',
                ontology: ['Nuclease-free water',
                    'DEPC-MQ',
                    'Elution Buffer',
                    'TE (1x)',
                    'Low TE',
                    'BR5',
                    'Other'
                ]
            }, {
                title: 'ORGANISM',
                ontology: []
            }, {
                title: 'OD 260/280',
                ontology: []
            }, {
                title: 'OD 260/230',
                ontology: []
            }, {
                title: 'LENGTH',
                ontology: []
            }, {
                title: 'AVERAGE LENGTH (bp)',
                ontology: []
            }, {
                title: 'SIZE RANGE (bp)',
                ontology: []
            }, {
                title: 'BARCODE NUMBER (p7)',
                ontology: []
            }, {
                title: 'BARCODE NUMBER (p5)',
                ontology: []
            }]
        }, {
            title: 'Sample_Requirements_HMW-DNA',
            attributes: [{
                    title: 'DNA_HMW UNIQUE SAMPLE NUMBER',
                    ontology: []
                },
                {
                    title: 'DNA_HMW SAMPLE NAME',
                    ontology: []
                },
                {
                    title: 'DNA_HMW CONC (ng/ul)',
                    ontology: []
                },
                {
                    title: 'DNA_HMW VOLUME (ul)',
                    ontology: []
                },
                {
                    title: 'DNA_HMW SOLVENT',
                    ontology: ['Nuclease-free water',
                        'DEPC-MQ',
                        'Elution Buffer',
                        'TE (1x)',
                        'Low TE',
                        'BR5',
                        'Other'
                    ]
                },
                {
                    title: 'DNA_HMW ORGANISM',
                    ontology: ['SINGLE', 'PAIRED']
                }
            ]
        }
    ]

    let initialWorkflow =
        '{"operators":{"0":{"properties":{"title":"Sample source","inputs":{"input_0":{"label":"Input 1"}},"outputs":{"output_0":{"label":"Output 1"}},"shape":"parallelogram","shape_id":"init"},"left":40,"top":100}},"links":{},"operatorTypes":{}}'

    function init_workflow() {
        var $flowchart = $j('#chart_canvas');
        var $container = $flowchart.parent();
        var cx = $flowchart.width() / 2;
        var cy = $flowchart.height() / 2;
        var currentZoom = 0.5;
        // Apply the plugin on a standard, empty div...
        var $operatorProperties = $j('#operator_properties');
        var $linkProperties = $j('#link_properties');
        var $operatorTitle = $j('#operator_title');
        var $linkColor = $j('#link_color');
        $flowchart.flowchart({
            onOperatorSelect: function (operatorId) {
                $operatorProperties.show();
                $operatorTitle.val($flowchart.flowchart('getOperatorTitle', operatorId));
                $operatorProperties.css('position', 'absolute');
                $operatorProperties.css("left", this.data.operators[operatorId].left - 28);
                $operatorProperties.css("top", this.data.operators[operatorId].top - 42);
                return true;
            },
            onOperatorUnselect: function () {
                // $operatorProperties.hide();
                // return true;
            },
            onLinkSelect: function (linkId) {
                $linkProperties.show();
                $linkColor.val($flowchart.flowchart('getLinkMainColor', linkId));
                return true;
            },
            onLinkUnselect: function () {
                $linkProperties.hide();
                return true;
            }
        });

        $operatorTitle.keyup(function () {
            var selectedOperatorId = $flowchart.flowchart('getSelectedOperatorId');
            if (selectedOperatorId != null) {
                $flowchart.flowchart('setOperatorTitle', selectedOperatorId, $operatorTitle
                    .val());
            }
        });
        $j('.delete_selected_button').click(function () {
            $flowchart.flowchart('deleteSelected');
            $j('#operator_properties').hide()
        });
        var $draggableOperators = $j('.draggable_operator');

        function getOperatorData($element) {
            const nbInputs = parseInt($element.data('nb-inputs'));
            const nbOutputs = parseInt($element.data('nb-outputs'));
            var data = {
                properties: {
                    title: $element.text(),
                    inputs: {},
                    outputs: {},
                    shape: $element.data('shape'),
                    shape_id: $element.data('shape_id'),
                },
            };
            var i = 0;
            for (i = 0; i < nbInputs; i++) {
                data.properties.inputs['input_' + i] = {
                    label: 'Input ' + (i + 1)
                };
            }
            for (i = 0; i < nbOutputs; i++) {
                data.properties.outputs['output_' + i] = {
                    label: 'Output ' + (i + 1)
                };
            }
            return data;
        }
        var operatorId = 0;
        $draggableOperators.draggable({
            cursor: "move",
            opacity: 0.7,
            helper: 'clone',
            appendTo: 'body',
            zIndex: 1000,
            helper: function (e) {
                var $this = $j(this);
                var data = getOperatorData($this);
                return $flowchart.flowchart('getOperatorElement', data);

            },
            stop: function (e, ui) {
                var $this = $j(this);
                var elOffset = ui.offset;
                var containerOffset = $container.offset();
                if (elOffset.left > containerOffset.left &&
                    elOffset.top > containerOffset.top &&
                    elOffset.left < containerOffset.left + $container.width() &&
                    elOffset.top < containerOffset.top + $container.height()) {
                    var flowchartOffset = $flowchart.offset();
                    var relativeLeft = elOffset.left - flowchartOffset.left;
                    var relativeTop = elOffset.top - flowchartOffset.top;
                    var positionRatio = $flowchart.flowchart('getPositionRatio');
                    relativeLeft /= positionRatio;
                    relativeTop /= positionRatio;
                    var data = getOperatorData($this);
                    data.left = relativeLeft;
                    data.top = relativeTop;
                    let opId = $flowchart.flowchart('addOperator', data);
                    showAssayPopup(relativeLeft, relativeTop)
                    // console.log(r);
                    // console.log($j('#chart_canvas').flowchart('getData'));


                    $flowchart.flowchart('selectOperator', opId);
                }
            }
        });
    }

    function showAssayPopup(left, top) {
        // $j('#assayInfo').show().css({
        //     'position': 'absolute',
        //     "left": left,
        //     "top": top
        // })

        $j('#assayInfo').modal('show');
    }

    $j('html').keyup(function (e) {
        if (e.keyCode == 46) {
            Delete()
        }
    });

    function Delete() {
        $j('#chart_canvas').flowchart('deleteSelected');
    }

    function loadWorkflow(data) {
        var $flowchart = $j('#chart_canvas');
        if (!data) {
            $flowchart.flowchart('setData', "");
        } else {
            $flowchart.flowchart('setData', data);
        }
    }

    function extractMethods(data) {
        let methods = [],
            methodsId = [],
            opId = []
        // if the workflow has method box
        $j.map(data.operators, (operator, i) => {
            if (operator.properties.shape === "rectangle") {
                methods.push(operator.properties.title)
                methodsId.push(operator.properties.shape_id)
                opId.push(i)
            }
        })
        return {
            methods,
            methodsId,
            opId // for using to identify Assay name associated with the method
        }
    }

    function extractSamples(data) {
        if (Object.keys(data.operators).length == 0)
            return []
        let TableNames = [];
        let TableopIndexes = [];
        $j.map(data.operators, (operator, index) => {
            TableopIndexes.push(index);
        })
        let FirstBox = findFirstBox(TableopIndexes, data.links);
        let arrenged = arrangeBoxes(data.operators, FirstBox, data.links)
        $j.map(arrenged, (operator, index) => {
            TableNames.push({
                'id': operator.properties.shape_id == "na" ? "?" : operator
                    .properties
                    .shape_id,
                'title': operator.properties.title,
                'content': ''
            });
        })
        return TableNames
    }

    function findFirstBox(operatorsIndexes, links) {
        let temp, result, g
        $j.each(operatorsIndexes, (op_key, op_val) => {
            temp = false;
            $j.each(links, (link_key, link_val) => {
                if (link_val.toOperator.toString() == op_val)
                    temp = true;
            })
            if (!temp) {
                result = op_val;
                return result
            }
        })
        return result
    }

    function arrangeBoxes(OpList, firstBoxId, links) {
        let arranged = [],
            current = firstBoxId;
        arranged.push(OpList[current])
        for (let i = 0; i < Object.keys(links).length; i++) {
            $j.each(links, (key, link) => {
                if (link.fromOperator == current) {
                    arranged.push(OpList[link.toOperator])
                    current = link.toOperator
                    return false
                }
            })
        }
        return arranged
    }

    function connectedSamples(methodName, data) {
        let operatorId, inputId, outputId
        $j.each(data.operators, (op_key, op_val) => {
            if (op_val.properties.title == methodName) {
                operatorId = op_key;
                return false;
            }
        })
        $j.each(data.links, (link_key, link_val) => {
            if (link_val.fromOperator == operatorId)
                outputId = link_val.toOperator
            if (link_val.toOperator == operatorId)
                inputId = link_val.fromOperator
        })
        return {
            "input": getOperatorName(inputId, data),
            "output": getOperatorName(outputId, data)
        }
    }

    function getOperatorName(operatorId, data) {
        let opName = ""
        $j.each(data.operators, (op_key, op_val) => {
            if (op_key == operatorId)
                opName = op_val.properties.title
        })
        return opName
    }

    function getSampleId(sampleName, sampleList) {
        let res = ""
        $j.each(sampleList, (i, sample) => {
            if (sample.title == sampleName)
                res = sample.id
        })
        return res
    }

    $j('#inputs_num').on('input', function (e) {
        let num = $j(this).val();
        if (num >= 0 && num < 4)
            $j('.wf_btn').data('nb-inputs', num);
    });

    $j('#outputs_num').on('input', function (e) {
        let num = $j(this).val();
        if (num >= 0 && num < 4)
            $j('.wf_btn').data('nb-outputs', num);
    });


    function refreshWorkflow() {
        setTimeout(() => {
            $j('#chart_canvas').flowchart('redrawLinksLayer')
        }, 250);
    }

    function validateWorkflow(data) {
        // Check for name duplication
        let operatorLength = Object.keys(data.operators).length
        if (operatorLength == 0) return true
        if (operatorLength - Object.keys(data.links).length != 1) {
            alert("Boxes are not connected correctly!")
            return false;
        }
        // // Always 2 baxes with only 1 link
        // let ioBoxes = 0,
        //     connections = 0
        // $j.each(data.operators, (op_key, op_val) => {
        //     $j.each(data.links, (link_key, link_val) => {
        //         if (link_val.toOperator == op_key ||
        //             link_val.fromOperator == op_key)
        //             connections++
        //     })
        //     if (connections == 1) {
        //         ioBoxes++;
        //     }
        //     connections = 0

        // })
        // if (ioBoxes != 2) {
        //     alert("Boxes are not connected correctly!")
        //     return false;
        // }
        let TableopIndexes = [];
        $j.map(data.operators, (operator, index) => {
            // if (operator.properties.shape === "parallelogram") {
            TableopIndexes.push(index);
            // }
        })

        let first = findFirstBox(TableopIndexes, data.links)
        if (data.operators[first].properties.shape != "parallelogram") {
            alert("First Box must be an Input box!")
            return false;
        }
        let names = [],
            nameValid = true
        $j.each(data.operators, (op_key, op_val) => {
            names.push(op_val.properties.title)
        })
        $j.each(names, (id, val) => {
            $j.each(names, (i, v) => {
                if (i != id && val == v) {
                    alert("Duplicate names detected!")
                    nameValid = false;
                    return false
                }
            })
            if (!nameValid)
                return false
        })
        if (nameValid)
            return true
        else
            return false
    }


    $j("#btnSaveAssay").on("click", () => {
        var Id = $j('#chart_canvas').flowchart('getSelectedOperatorId');
        AssayDetails.push({
            opId: Id,
            title: $j.trim($j("#assayTitle").val()),
            description: $j.trim($j("#assayDes").val()),
            methodType: $j("#method_type").val() || 0
        })
        $j("#assayInfo").hide()
    })
    $j("#btnCancelAssay").on("click", () => {
        $j("#assayInfo").hide()
    })

    function addAssayTypeOptions() {
        $j('#assayType').empty()
        $j.each(methodTypes, (key, value) => {
            $j('#assayType')
                .append($j("<option></option>")
                    .attr("value", key)
                    .text(value.title));
        })

        $j.each(methodTypes[0].attributes, (k, attr) => {
            $j("#attribs").append(`<li>${attr.title}</li>`)
        })

    }

    asyTypeChange = (i) => {
        $j("#attribs").empty()
        $j("#method_type").val(i.value)
        $j.each(methodTypes[i.value].attributes, (k, attr) => {
            $j("#attribs").append(`<li>${attr.title}</li>`)
        })
    }
</script>