
    <%# <script src="assets/js/jquery.js"></script> %>

       <%=javascript_include_tag('jquery-ui.min.js')%>
          <%=javascript_include_tag('panzoom.js')%>
             <%=javascript_include_tag('wheel.js')%>
                <%=javascript_include_tag('jquery.flowchart.js')%>

    <%= stylesheet_link_tag 'application', 'jquery.flowchart.css' %>
    <%# <link rel="stylesheet" href=" https://fonts.googleapis.com/css?family=Archivo+Narrow&display=swap"> %>

    <div id="content-wrapper">
        <div class="inner">
            <section id="main-content">


                <div class="flowchart-example">
                  
                    <div class="flowchart-example-container" id="chart_canvas"></div>
                 
                    <script type="text/javascript">
                        $j(document).ready(function() {
                            init_workflow();                           

                        });

                        function init_workflow(){
                            var $flowchart = $j('#chart_canvas');
                            var $container = $flowchart.parent();

                            var cx = $flowchart.width() / 2;
                            var cy = $flowchart.height() / 2;


                            // Panzoom initialization...
                            //$flowchart.panzoom();

                            // Centering panzoom
                            //$flowchart.panzoom('pan', -cx + $container.width() / 2, -cy + $container.height() / 2);

                            // Panzoom zoom handling...
                           // var possibleZooms = [0.5, 0.75, 1, 2, 3];
                            var currentZoom =1;
                            // $container.on('mousewheel.focal', function(e) {
                            //     e.preventDefault();
                            //     var delta = (e.delta || e.originalEvent.wheelDelta) || e.originalEvent.detail;
                            //     var zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;
                            //     currentZoom = Math.max(0, Math.min(possibleZooms.length - 1, (currentZoom + (zoomOut * 2 - 1))));
                            //     $flowchart.flowchart('setPositionRatio', possibleZooms[currentZoom]);
                            //     $flowchart.panzoom('zoom', possibleZooms[currentZoom], {
                            //         animate: false,
                            //         focal: e
                            //     });
                            // });

                            // Apply the plugin on a standard, empty div...
                            var $operatorProperties = $j('#operator_properties');
                            var $linkProperties = $j('#link_properties');
                            var $operatorTitle = $j('#operator_title');
                            var $linkColor = $j('#link_color');

                            $flowchart.flowchart({
                                //data: data
                                onOperatorSelect: function(operatorId) {
                                    $operatorProperties.show();
                                    $operatorTitle.val($flowchart.flowchart('getOperatorTitle', operatorId));
                                    return true;
                                },
                                onOperatorUnselect: function() {
                                    $operatorProperties.hide();
                                    return true;
                                },
                                onLinkSelect: function(linkId) {
                                    $linkProperties.show();
                                    $linkColor.val($flowchart.flowchart('getLinkMainColor', linkId));
                                    return true;
                                },
                                onLinkUnselect: function() {
                                    $linkProperties.hide();
                                    return true;
                                }
                            });

                            $operatorTitle.keyup(function() {
                                var selectedOperatorId = $flowchart.flowchart('getSelectedOperatorId');
                                if (selectedOperatorId != null) {
                                    $flowchart.flowchart('setOperatorTitle', selectedOperatorId, $operatorTitle.val());
                                }
                            });


                            $flowchart.parent().siblings('.delete_selected_button').click(function() {
                                $flowchart.flowchart('deleteSelected');
                            });


                            var $draggableOperators = $j('.draggable_operator');

                            function getOperatorData($element) {
                              
                                const nbInputs = parseInt($element.data('nb-inputs'));
                                const nbOutputs = parseInt($element.data('nb-outputs'));

                                console.log(nbInputs)
                                
                                var data = {
                                    properties: {
                                        title: $element.text(),
                                        inputs: {},
                                        outputs: {},
                                        shape: $element.data('shape')
                                    },

                                };

                                var i = 0;
                                for (i = 0; i < nbInputs; i++) {
                                    data.properties.inputs['input_' + i] = {
                                        label: 'Input ' + (i + 1)
                                    };
                                }
                                for (i = 0; i < nbOutputs; i++) {
                                    data.properties.outputs['output_' + i] = {
                                        label: 'Output ' + (i + 1)
                                    };
                                }

                                return data;
                            }

                            var operatorId = 0;

                            $draggableOperators.draggable({
                                cursor: "move",
                                opacity: 0.7,

                                helper: 'clone',
                                appendTo: 'body',
                                zIndex: 1000,

                                helper: function(e) {
                                    var $this = $j(this);
                                    var data = getOperatorData($this);
                                    return $flowchart.flowchart('getOperatorElement', data);
                                    
                                },
                                stop: function(e, ui) {
                                    var $this = $j(this);
                                    var elOffset = ui.offset;
                                    var containerOffset = $container.offset();
                                    if (elOffset.left > containerOffset.left &&
                                        elOffset.top > containerOffset.top &&
                                        elOffset.left < containerOffset.left + $container.width() &&
                                        elOffset.top < containerOffset.top + $container.height()) {

                                        var flowchartOffset = $flowchart.offset();

                                        var relativeLeft = elOffset.left - flowchartOffset.left;
                                        var relativeTop = elOffset.top - flowchartOffset.top;

                                        var positionRatio = $flowchart.flowchart('getPositionRatio');
                                        relativeLeft /= positionRatio;
                                        relativeTop /= positionRatio;

                                        var data = getOperatorData($this);
                                        data.left = relativeLeft;
                                        data.top = relativeTop;

                                        $flowchart.flowchart('addOperator', data);
                                    }
                                }
                            });
                        }

                        $j('html').keyup(function(e) {
                            if (e.keyCode == 46) {
                                Delete()
                            }
                        });

                        function Delete() {

                            var $flowchart = $j('#chart_canvas');
                            $flowchart.flowchart('deleteSelected');

                        }

                        function saveWorkflow()
                        {
                          
                                   

                            var $flowchart = $j('#chart_canvas'); 
                            var data = $flowchart.flowchart('getData');
                            setCookie("wf",JSON.stringify(data), 1000000)
                        
                        }

                        function loadWorkflow()
                        {
                          
                                var $flowchart = $j('#chart_canvas');
                              let data = getCookie("wf");

                              console .log(data);
                              console .log(JSON.parse(data));

                              //
                              if (data.length > 20)
                              {
                                    $flowchart.flowchart('setData', JSON.parse(data));
                              } 
                              
                        }

               

                    </script>
                </div>

   <div class="draggable_operators">

                        <div class="draggable_operators_divs">
                            <div id="fgg" class="draggable_operator ui-draggable ui-draggable-handle wf_btn oval_button" data-nb-inputs="1" data-nb-outputs="1" data-shape='oval'>Source material</div> &nbsp;
                            <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn rectangle_button" data-nb-inputs="1" data-nb-outputs="1" data-shape='rectangle'>Method</div>&nbsp;&nbsp;&nbsp;
                            <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn parallelogram_button" data-nb-inputs="1" data-nb-outputs="1" data-shape='parallelogram'>Output/input material</div>&nbsp;
                            <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn parallelogram_button" data-nb-inputs="1" data-nb-outputs="1" data-shape='parallelogram'>Output</div>&nbsp;
                            <div class="draggable_operator ui-draggable ui-draggable-handle wf_btn oval_button" data-nb-inputs="1" data-nb-outputs="1" data-shape='oval'>Data analysis</div>&nbsp;
                            <div class="form-inline" style="margin-top:10px">
                                    Inputs:<input id="inputs_num" type="number" class="form-control" style="width:50px" value="1" min="0" max="3"> 
                                    &nbsp;Outputs:<input id="outputs_num" type="number" class="form-control" style="width:50px"  value="1" min="0" max="3">
                            </div>
                            <%# <input type="button" value="Delete" class="btn btn-primary" onclick="Delete();" /> %>
                            &emsp;
                            &emsp;
                            <input type="button" class="btn btn-primary" value="Save" onclick="saveWorkflow();" style="float:right">
                        </div>
                    </div>
               
   <div id="operator_properties" style="display: none;">
                        <label for="operator_title">Operator's title: </label><input type="text" id="operator_title" class="form-control">
                    </div>

        </div>
    </div>



<script>
    $j('#inputs_num').on('input', function(e) {
         let num = $j(this).val();
        if (num >= 0 && num < 4)
            $j('.wf_btn').data('nb-inputs', num);
    });

    $j('#outputs_num').on('input', function(e) {
        let num = $j(this).val();
        if (num >= 0 && num < 4)
            $j('.wf_btn').data('nb-outputs', num);
   
       
    });      
</script>