<%= render :partial => "general/item_title",:locals => {:item=>@project, :buttons_partial => 'projects/buttons'} %>
<div>
  <div class="col-lg-2"></div>
  <div class="col-lg-8">
    <%= hidden_field_tag 'selected_item_id', ''  %>
    <%= hidden_field_tag 'selected_item_type', ''  %>
    <%= hidden_field_tag 'selected_folder', ''  %>
    <%= hidden_field_tag 'selected_tree_item_id', ''  %>

  </div>
  <div class="col-lg-2"></div>
</div>
<div class="row">
  <div class="col-md-12  box_about_actor">
    <div class="row">
      <div class="col-md-7">
        <ul class="bcrumb">
          <li><a href="#">Project</a></li>
          <li style="display:none"><a href="#">Investigation</a></li>
          <li style="display:none"><a href="#">Study</a></li>
          <li style="display:none"><a href="#">Assay</a></li>
        </ul>
      </div>
      <div class="col-md-5" style="text-align:right">
        <div>
          <input id="btn_delete_item" type="button" class="btn btn-primary" value="Delete" onclick="deleteItem()" />
        </div>
      </div>
    </div>
    <div class="row">
      <div class=col-lg-3>
        <div id="treeview" class="col-lg-12 project_treeview">
          <div id="html" class="demo"></div>
        </div>
      </div>
      <div class="col-lg-9">
        <div style="padding:10px;background-color: aliceblue;border-radius: 5px; border: #ddd 1px solid">
          <div id="container" class="container-fluid">
            <div id="projectDetailContainer" class="row">
              <div class="col-lg-8 simpleForm">
                <%= render :partial => "project_details" -%>
              </div>
              <div class="col-lg-4">
                <%= render :partial => "layouts/contribution_section_box_avatar", :locals => { :object => @project } -%>
                <% if @project.can_manage? %>
                <%= render :partial => 'general/storage_usage_box', locals: { programme: @project,
                                                                    url: storage_report_project_path(@project)} %>
                <% end %>
              </div>
            </div>
            <div id="fileManagerContainer" class="row">
              <%= render :partial => "filemanager" -%>
            </div>
            <div id="investigationContainer" class="row">

              <%= render :partial => "investigation_details" -%>

            </div>
            <div id="studyContainer" class="row">
              <%= render :partial => "study" -%>
            </div>
          </div>
        </div>
      </div>
    </div>
    <% if Seek::Config.project_hierarchy_enabled && logged_in_and_member? -%>
    <div style="clear:both;">
      <b>
        Project Hierarchies
        (<%= link_to "hide", '#', id: 'project-hierarchy-toggle' -%>):
      </b>
      <br />
      <br />
      <div id="project_hierarchy">
        <ul>
          <%= Rails.cache.fetch([:project_tree_editor, @project.cache_key]) { tree_editor_display Project, false, false, @project.id, "Person", true, true } %>
        </ul>
      </div>
    </div>
    <br />
    <div style="clear:both;">
      <b>
        <%= t('project') %> Members
        (<%= link_to "show", '#', id: 'project-hierarchy-members-toggle' %>):
      </b>
      <br />
      <br />
      <div id="project_mailing_list" style="display: none;">
        <%= project_mailing_list @project %>
      </div>
    </div>
    <% end %>
    <% if false%>
    <%# get, classify and authorize all assets for this project -%>
    <%= render :partial=>"general/items_related_to",:object => @project %>
    <%end%>
    <% if request_project_membership_button_enabled?(@project) %>
    <%= render partial: 'request_membership_form', locals: { project: @project } %>
    <% end %>
  </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="data-file-modal-inv">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <%= render :partial=>"investigations/new" %>
        <div class="row" style="padding:15px">
          <a id="submit_investigation" type="button" class="btn btn-primary">Create</a>
          &nbsp;
          <a type="button" class="btn btn-default">Cancel</a>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="data-file-modal-std">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <%= render :partial=>"studies/new" %>
        <div class="row" style="padding:15px">
          <a id="submit_study" type="button" class="btn btn-primary">Create</a>
          &nbsp;
          <a type="button" class="btn btn-default">Cancel</a>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  $j('#project-hierarchy-toggle').click(function () {
    var el = $j('#project_hierarchy');

    if (el[0].style.display === 'none') {
      el.fadeIn();
      $j(this).text('hide');
    } else {
      el.fadeOut();
      $j(this).text('show');
    }

    return false;
  });

  $j('#project-hierarchy-members-toggle').click(function () {
    var el = $j('#project_mailing_list');

    if (el[0].style.display === 'none') {
      el.fadeIn();
      $j(this).text('hide');
    } else {
      el.fadeOut();
      $j(this).text('show');
    }

    return false;
  });
</script>

<script>
  (function ($, undefined) {
    "use strict";
    $j.jstree.plugins.separate = function (options, parent) {
      this.redraw_node = function (obj, deep, callback, force_draw) {
        obj = parent.redraw_node.apply(this, arguments);
        var n = this.get_node(obj),
          d = document;
        if (obj) {
          if (n.original.count) {
            obj.childNodes[1].innerHTML += " <span class='badge badge-secondary'>" + n.original.count +
              "</span>"
          }
          if (n.original._type) $j(obj.childNodes[1]).attr('_type', n.original._type)
          if (n.original._id) $j(obj.childNodes[1]).attr('_id', n.original._id)
          if (n.state.separate) {
            let p = d.createElement('p')
            p.innerHTML = n.state.separate.label;
            p.className = 'separator';
            if (n.state.separate.action) {
              let a = d.createElement('a')
              a.href = n.state.separate.action;
              a.className = 'treeaction glyphicon glyphicon-plus';
              $j(a).attr('onclick', `add${n.state.separate.label}(this)`)
              obj.prepend(a)

            }
            obj.prepend(p);
          }
        }
        return obj;
      };
    }
  })(jQuery);

  let pid, uid
  $j(document).ready(function () {
    pid = <%= params[:id] %>
      uid = <%= current_user.id if current_user %>
      hide_all_containers()
    $j("#projectDetailContainer").show()
    get_project()
    init_workflow()
    $j("a:contains('Cancel')").click(function (e) {
      e.preventDefault();
      $j('#data-file-modal-inv').modal('hide');
      $j('#data-file-modal-std').modal('hide');
    })
    $j("#submit_investigation").click(function () {
      data = {
        "data": {
          "type": "investigations",
          "attributes": {
            "title": $j("#investigation_title").val(),
            "policy": {
              "access": "download",
              "permissions": [{
                "resource": {
                  "id": pid,
                  "type": "projects"
                },
                "access": "manage"
              }]
            },
            "description": $j("#investigation_description").val()
          },
          "relationships": {
            "projects": {
              "data": [{
                "id": pid,
                "type": "projects"
              }]
            },
            "publications": {
              "data": []
            },
            "creators": {
              "data": [{
                "id": uid,
                "type": "people"
              }]
            }
          }
        }
      }
      $j.ajax({
        method: 'POST',
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        cache: false,
        url: '/investigations',
        data: JSON.stringify(data),
        success: s => {
          location.reload(true);
        },
        error: (e) => {
          console.log('error creating investigation!')
        }
      })
    })

    $j("#submit_study").click(function () {
      let data = {
        "data": {
          "type": "studies",
          "attributes": {
            "title": $j("#study_title").val(),
            "description": $j("#study_description").val(),
            "policy": {
              "access": "download",
              "permissions": [{
                "resource": {
                  "id": pid,
                  "type": "projects"
                },
                "access": "manage"
              }]
            }
          },
          "relationships": {
            "investigation": {
              "data": {
                "id": $j("#selected_item_id").val(),
                "type": "investigations"
              }
            },
            "publications": {
              "data": []
            },
            "creators": {
              "data": [{
                "id": uid,
                "type": "people"
              }]
            }
          }
        }
      }
      $j.ajax({
        method: 'POST',
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        cache: false,
        url: '/studies',
        data: JSON.stringify(data),
        success: s => {
          console.log('study created successfully!')
          location.reload(true);
        },
        error: (e) => {
          console.log('error creating study!')
        }
      })
    })

    $j("#btn_save_workflow").on("click", function () {
      SAVE()
    });

  })


  //-----------------------------------------------------------------
  async function SAVE() {
    let flowchartData = $j('#chart_canvas').flowchart('getData');
    const res = await getStudyAssays()
    let oldAssays = JSON.parse(res.assays)
    let oldSamples = JSON.parse(res.samples)
    let newSamples = extractSamples(flowchartData);
    newSamples = compareAndUpdateSamples(oldSamples, newSamples)
    let oldMethods = getOldMethods(res)
    let newMethods = extractMethods(flowchartData)
    let toBeRemovedAssays = ToBeRemovedAssays(oldMethods, newMethods)
    let counter = oldMethods.length - toBeRemovedAssays.length
    $j.when.apply($j, toBeRemovedAssays).then(() => {
      let oldMethodsTitles = $j.map(oldMethods, (value, index) => {
        return value.title
      });
      let toBeCreatedAssays = [],
        newAssays = []
      $j.each(newMethods, (i, v) => {
        if ($j.inArray(v, oldMethodsTitles) == -1) {
          counter++
          toBeCreatedAssays.push(createAssay(pid, $j("#selected_item_id").val(), uid,
            `Assay${counter}`))
          newAssays.push({
            "id": "x",
            "title": "y",
            "method": {
              "title": newMethods[i],
              "content": ""
            },
            "in_id": getSampleId(connectedSamples(newMethods[i], flowchartData).input, newSamples),
            "out_id": getSampleId(connectedSamples(newMethods[i], flowchartData).output,
              newSamples)
          })
        }
      });
      $j.when.apply($j, toBeCreatedAssays)
        .then((res) => {
          newAssays = updateAssaysId(newAssays, toBeCreatedAssays)
          newAssays = compareAndUpdateAssays(oldAssays, newAssays, newMethods)
          setOperatorId(flowchartData, newSamples, newAssays)
          save_flowchart(flowchartData, newAssays, newSamples)
          location.reload(true);
        })
    })


  }

  function getStudyAssays() {
    return $j.ajax({
      method: 'GET',
      cache: false,
      url: `/projects/${pid}/study_assays?std_id=${$j("#selected_item_id").val()}`
    })
  }

  function getOldMethods(data) {
    // console.log("getOldMethods")
    // console.log(data)
    return $j.map(JSON.parse(data.assays), i => {
      return {
        "id": i.id,
        "title": i.method.title
      }
    })
  }

  function ToBeRemovedAssays(OldMethods, newMethods) {
    let arr = []
    $j.each(OldMethods, (i, item) => {
      if ($j.inArray(item.title, newMethods) == -1) {
        arr.push(removeAssay(item.id))
      }
    })
    return arr
  }

  function updateAssaysId(assays, arr) {
    for (var i = 0; i < arr.length; i++) {
      assays[i].id = JSON.parse(arr[i].responseText).data.id
      assays[i].title = JSON.parse(arr[i].responseText).data.attributes.title
    }
    return assays
  }

  function setOperatorId(data, samples, assays) {
    $j.map(data.operators, (operator, index) => {
      $j.each(samples, (i, val) => {
        if (val.title == operator.properties.title) {
          operator.properties.shape_id = val.id
        }
      })
      $j.each(assays, (i, val) => {
        if (val.method.title == operator.properties.title) {
          operator.properties.shape_id = val.id
        }
      })
    })
  }


  function compareAndUpdateAssays(old, New, FLMethods){
    let temp = []
   let exist = false
   $j.each(FLMethods,(k, v)=>{
     for (let i=0; i<old.length;i++){
          if (old[i].method.title == v)
          {
            temp.push(old[i])
            break;
          }
       }
   })
   for (let i=0; i<New.length;i++){
     temp.push(New[i])
   }
    return temp
  }
  function compareAndUpdateSamples(old, New)
  {
    // New contains all samples
    if (New.length == 0) return old
    for (let j=0; j<New.length;j++){
      for (let i=0; i<old.length;i++){
          if (old[i].id == New[j].id)
          {
            New[j].title = old[i].title // If exist just update the title
            New[j].content = old[i].content
            break;
          }
       }
    }
    return New
  
  }
  //-----------------------------------------------------------------


  function removeAssay(assayId) {
    return $j.ajax({
      method: 'DELETE',
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cache: false,
      url: `/assays/${assayId}`,
      success: s => {
        console.log(`assay ${assayId} deleted!`)
      },
      error: (e) => {
        console.log(`error deleting assay ${assayId}!`)
      }
    })
  }

  function createAssay(pid, std_id, uid, title) {
    let data = {
      "data": {
        "type": "assays",
        "attributes": {
          "title": title,
          "assay_class": {
            "key": "EXP"
          },
          "policy": {
            "access": "download",
            "permissions": [{
              "resource": {
                "id": pid,
                "type": "projects"
              },
              "access": "manage"
            }]
          }
        },
        "relationships": {
          "study": {
            "data": {
              "id": std_id,
              "type": "studies"
            }
          },
          "creators": {
            "data": [{
              "id": uid,
              "type": "people"
            }]
          }
        }
      }
    }

    return $j.ajax({
      method: 'POST',
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cache: false,
      url: '/assays',
      data: JSON.stringify(data),
      success: s => {
        console.log('assay was created successfully! : ' + s.data.id)
        s.data.id
      },
      error: (e) => {
        console.log('error create assay!')
      }
    })
  }


  function hide_all_containers() {
    $j("#projectDetailContainer").hide()
    $j("#fileManagerContainer").hide()
    $j("#investigationContainer").hide()
    $j("#studyContainer").hide()
    $j("#text_content").hide()
    $j("#tbl_file_content").hide()
    $j("#separator_item").hide()
  }

  $j('#html').on('changed.jstree', function (e, data) {
      let item = data.instance.get_node(data.selected[0])
      let item_id = item.original._id
      let item_type = item.original._type
      $j("#selected_item_type").val(item_type)
      $j("#selected_item_id").val(item_id)
      $j("#selected_tree_item_id").val(item.id)
      hide_all_containers();
      switch (item_type) {
        case "prj":
          $j("#projectDetailContainer").show()
          breadcrumb("prj")
          break;
        case "inv":
          $j("#investigationContainer").show()
          populate_tags(item_id, 'inv')
          breadcrumb("inv")
          break;
        case "std":
          $j("#studyContainer").show()
          populate_tags(item_id, 'std')
          breadcrumb("std")
          load_design();
          break;
        case "asy":
          $j("#fileManagerContainer").show()
          let std_id = $j(`#${item.parent}`).children('a[_type="std"]').attr("_id")
          let asy_id = $j(`#${item.id}`).children('a[_type="asy"]').attr("_id")
          load_samples(std_id, asy_id);
          breadcrumb("asy")
          break;
        case "fld":
          $j("#fileManagerContainer").show()
          $j("#selected_folder").val(item.text)
          $j("#separator_item").show()
          load_files()
          break;
        case "methods":
          $j("#fileManagerContainer").show()
          $j("#selected_folder").val(item.text)
          load_method(item_id.split('_')[1], item_id.split('_')[2])
          breadcrumb("asy")
          break;
      }
    })
    .jstree({
      'core': {
        'data': <%= @tree_data.html_safe %>
      },
      plugins: ["separate"]
    });

  function addInvestigations(t) {
    $j('#data-file-modal-inv').modal({
      backdrop: 'static',
      keyboard: true
    });
  }

  function addStudies(t) {
    //Change the JStree active item to the associated Investigation id
    $j("#selected_item_id").val($j(t).parent().children('.jstree-anchor').attr('_id'))
    $j('#data-file-modal-std').modal({
      backdrop: 'static',
      keyboard: true
    });
  }

  function populate_tags(item_id, item_type) {
    //Populate the tags input with list of 'Shared with people'
    let geturl = item_type == 'inv' ? '/investigation_shared_with?inv_id=' : '/study_shared_with?std_id='
    let tag_input = item_type == 'inv' ? '#investigation-permission-people-ids' : '#study-permission-people-ids'
    $j.ajax({
      type: 'GET',
      cache: false,
      url: pid + geturl + item_id,
      success: s => {
        if (s.people)
          $j(tag_input).tagsinput('removeAll');
        s.people.map((person) => {
          $j(tag_input).tagsinput('add', {
            id: person.id,
            name: person.nam
          })
        })
        if (item_type == 'inv') get_investigation()
        else get_study()
      },
      error: e => {
        alert("Error retrieving investigation sharing list")
      }
    })
  }

  function get_study() {
    $j.ajax({
      method: 'GET',
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cache: false,
      url: `/studies/${$j("#selected_item_id").val()}`,
      success: s => {
        $j('#studytitleContent').text(s.data.attributes.title)
        $j('#StudyDescriptionContent').text(s.data.attributes.description)
        $j('#experimentalists').text(s.data.attributes.experimentalists)
      },
      error: (e) => {
        console.log('error gettign study!')
      }
    })
  }

  function get_investigation() {
    $j.ajax({
      method: 'GET',
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cache: false,
      url: `/investigations/${$j("#selected_item_id").val()}`,
      success: s => {
        $j('#investigationTitleC').text(s.data.attributes.title)
        $j('#investigationDesC').text(s.data.attributes.description)
      },
      error: (e) => {
        console.log('error gettign investigation!')
      }
    })
  }

  function get_project() {
    $j.ajax({
      method: 'GET',
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      cache: false,
      url: `/projects/${pid}`,
      success: s => {
        $j('#projectTitleC').text(s.data.attributes.title)
        $j('#projectDesC').text(s.data.attributes.description)
      },
      error: (e) => {
        console.log('error gettign investigation!')
      }
    })
  }

  function uniqId() {
    return Math.round((Math.random() * 36 ** 12)).toString(36);
  }

  function breadcrumb(item) {
    $j(".bcrumb li").hide()
    switch (item) {
      case "prj":
        $j(".bcrumb li:first-child").show()
        break;
      case "inv":
        $j(".bcrumb li:first-child, li:nth-child(2)").show()
        break;
      case "std":
        $j(".bcrumb li:first-child, li:nth-child(2), li:nth-child(3)").show()
        break;
      case "asy":
        $j(".bcrumb li:first-child, li:nth-child(2), li:nth-child(3), li:nth-child(4)").show()
        break;
    }
  }

  function deleteItem() {

    if (confirm('Are you sure you want to delete the')) {
      let id = $j("#selected_item_id").val();
      let itemType = "unknown"
      switch ($j("#selected_item_type").val()) {
        case "prj":
          itemType = "projects";
          break;
        case "inv":
          itemType = "investigations";
          break;
        case "std":
          itemType = "studies";
          break;
        case "asy":
          itemType = "assays";
          break;
        default:
          itemType = "unknown";
      }
      if (!id || itemType == "unknown") {
        alert("Please select item.")
        return;
      }
      $j.ajax({
        method: 'DELETE',
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        cache: false,
        url: `/${itemType}/${id}`,
        success: s => {
          alert("Item was deleted successfully!")
          location.reload(true);
        },
        error: e => {
          if (e.responseJSON.errors)
            alert(e.responseJSON.errors[0].title + '\n' + e.responseJSON.errors[0].details)
          else
            alert('Cannot process the request')
        }
      })
    } else {

    }
  }
</script>