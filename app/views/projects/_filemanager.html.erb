 <div class="col-lg-12">
     <input type="file" id="file" style="display:none">
     <div class="row">
         <div id=files class="simpleForm" style="overflow-x:scroll">
             <ul class="fileManager">
                 <li>empty</li>
                 <li id="separator_item" style="border-left: 2px dotted #aaa; border-radius:0">
                     <span id="upload_btn" title="Upload a file" class="big_plus glyphicon glyphicon-plus"></span>
                 </li>
             </ul>
         </div>
     </div>
     <div class="row" id="text_content">
         <input id="btn_save_content" class="btn btn-sm btn-primary pull-right" type="button" value="Save">
         <textarea placeholder="Insert content here!" id="txt_file_content" class="form-control">
         </textarea>
     </div>
 </div>
 <div id="tbl_file_content" style="display:none">
     <a id="sample_add_row" class="btn btn-primary btn-sm"> <i class="glyphicon glyphicon-plus"></i>Add
         Row</a>
     <a id="sample_add_col" class="btn btn-primary btn-sm">
         <i class="glyphicon glyphicon-plus"></i>Add Column</a>
     <a id="btn_update_tables" class="btn btn-primary btn-sm pull-right">Save</a>

     <table>
         <table class="table tableXs tableInpOut">
             <thead class="thead-dark">
                 <tr></tr>
             </thead>
             <tbody>
             </tbody>
         </table>
     </table>
 </div>

 <script>
     let folderName
     $j("#upload_btn").on('click', () => {
         $j('#file').click();
     })

     $j('#file').on('change', () => {
         let formData = new FormData();
         let file = $j('#file')[0].files[0]
         formData.append('file', file);
         formData.append('folder', folderName)
         formData.append('description', 'description...')
         $j.ajax({
             type: 'POST',
             url: pid + '/upload_project_file',
             data: formData,
             cache: false,
             processData: false,
             contentType: false,
             success: s => {
                 console.log('Uploaded')
                 let ext = $j('#file').val().split('.').pop();
                 addFile(s.id, file_icon(ext), minify(file.name))
                 let origin = $j("#" + $j("#selected_tree_item_id").val() + " a span")
                 bounce(origin, parseInt(origin.text()) + 1)
                 $j('#file').val('');
             }
         })
     })


     function load_files() {
         folderName = $j('#selected_folder').val()
         let base = $j(".fileManager");
         $j('.fileManager li:not(:last-child)').remove();

         base.not(':last').remove()
         $j.ajax({
             type: 'GET',
             cache: false,
             url: pid + '/get_file_list?folder=' + folderName,
             success: result => {
                 if (!result) {
                     base.empty()
                     base.append("<li>Error!</li>")
                     return
                 }
                 if (result.length > 0) {
                     result.forEach(function (file) {
                         addFile(file.id, file_icon(file.extension), minify(file.name))
                     })
                 } else {
                     base.prepend('<li>empty</li>')
                 }
             }
         })
     }

     function addFile(id, ext, name) {
         if ($j(".fileManager li:first").text() == "empty")
             $j(".fileManager li:first").remove();

         let item = id.includes('method') || id.includes('sample') ?
             `<li class="file" data-id=${id}><img src="/assets/${ext}.png"> <br><a onClick="load_text_content('${id}')" data-filetype="txt" class="file">${name}</a></li>` :
             `<li class="file" data-id=${id}><img src="/assets/${ext}.png"> <br><a href="/projects/${pid}/download_file?uid=${id}" data-filetype="txt" class="file">` +
             `${name}</a><span onClick="delete_file(event)" class="del_file"><i class="glyphicon glyphicon-remove"></i></span></li>`
         $j(".fileManager").prepend(item)
     }

     function minify(f) {
         return f.length > 20 ? f.substr(0, 20) + '...' : f
     }

     function file_icon(extension) {
         switch (extension.toLowerCase().replace('.', '')) {
             case 'txt':
                 return 'txt'
             case 'doc', 'docx':
                 return 'doc'
             case 'jpg':
                 return 'jpg'
             case 'png':
                 return 'png'
             case 'ppt', 'pptx':
                 return 'ppt'
             case 'svg':
                 return 'svg'
             case 'xls', 'xlsx':
                 return 'xls'
             case 'csv':
                 return 'csv'
             case 'pdf':
                 return 'pdf'
             case 'tbl':
                 return 'tbl'
             default:
                 return 'general'
         }
     }

     function load_text_content(id) {
         let std_id = id.split('_')[0]
         let item_id = id.split('_')[1]
         let item_type = id.split('_')[2]
         $j("#text_content").attr('data-selected', id)
         if (item_type.includes("method"))
             $j("#text_content").show()
         else
             $j("#tbl_file_content").show()
         $j.ajax({
             type: 'GET',
             cache: false,
             url: pid + '/text_content',
             data: {
                 std_id,
                 item_id,
                 item_type
             },
             success: result => {
                 if (!result) {
                     alert('Error retrieving content!')
                     return
                 }
                 if (item_type.includes("method"))
                     $j('#txt_file_content').val(result.data)
                 else {
                     if (result.data && result.data.length > 10) {
                         //    $j('.tableInpOut').html(result.data);
                         $j('.tableInpOut').html(loadIOTable(result.data));
                         setTableOntology('.tableInpOut')
                     } else {
                         $j('.tableInpOut').html(
                             '<table class="table tableXs tableInpOut"><thead class="thead-dark"><tr></tr></thead><tbody></tbody></table>'
                         );
                     }
                 }
             }
         })
     }

     function loadIOTable(data) {
         $j('.tableInpOut tbody').empty()
         $j('.tableInpOut thead tr').empty()
         data = JSON.parse(data)
         let realCount = Object.keys(data[0]).length
         for (let i = 0; i < realCount; i++) {
             let hash = Object.keys(data[0])[i].split('%')
             if (hash.length > 1)
                 add_dep_col('', hash[0], ".tableInpOut", 1, hash[1])
             else
                 add_dep_col('', Object.keys(data[0])[i], ".tableInpOut")
         }
         // Apply the ontology type
         console.log(data)
         for (let i = 0; i < data.length; i++)
             add_rep('.tableInpOut', data[i])
         add_remove_action(".tableInpOut")
     }

     $j(".fileManager").on("click", ".file", function (event) {
         $j('.file').each(function () {
             $j(this).removeClass("file_selected")
         });
         $j(this).addClass("file_selected")
     })

     function bounce(item, text) {
         item.addClass('animate')
         setTimeout(() => {
             item.css('transform', 'scale(2)')
             item.css('opacity', '0')
         }, 1);
         setTimeout(() => {
             item.css('transform', 'scale(1)')
             item.css('opacity', '1')
             item.text(text)
         }, 300);
     }

     function delete_file(e) {
         if (confirm('Are you sure?')) {
             let data = {
                 'uid': $j(e.target).closest('li').attr('data-id')
             }
             $j.ajax({
                 type: 'DELETE',
                 cache: false,
                 url: pid + '/delete_project_file',
                 data,
                 success: result => {
                     $j(e.target).closest('li').remove()
                     let origin = $j("#" + $j("#selected_tree_item_id").val() + " a span")
                     bounce(origin, parseInt(origin.text()) - 1)
                     console.log('the file was deleted!')
                 }
             })
         }
     }

     $j('#btn_save_content').on('click', () => {
         let std_id = $j("#text_content").attr('data-selected').split('_')[0]
         let asy_id = $j("#text_content").attr('data-selected').split('_')[1]
         let content = $j("#txt_file_content").val()
         update_method(std_id, asy_id, content)
     })

     function showPreDefinedCols(e, tblClass, bias) {
         $j('.arrow_box').toggle();
         $j('.arrow_box').position({
             my: "left top",
             at: "right+12 top-10",
             of: $j(e.target),
             collision: "fit"
         });
         $j("#btn_custom_col").attr("onclick", `addCustomCol('${tblClass}','${bias}')`);
         $j("input:button.predef").each((index, val) => {
             $j(val).attr("onclick",
                 `addCustomCol('${tblClass}','${bias}','${$j(val).val()}', '${$j(val).data("term")}')`);
         })
         removeUsedItems(tblClass)
     }

     function addCustomCol(tblClass, bias, text = '', acTerm = '') {
         //console.log("acTerm " + acTerm)
         //AddCell(tblClass, $j('.customCol').val())
         if (text.length == 0) text = $j.trim($j('.customCol').val())
         $j(".arrow_box").css({
             display: "none",
         });
         add_dep_col('', text, tblClass, bias, acTerm)
     }

     function removeUsedItems(tblClass) {

         var colNames = $j(`${tblClass} thead tr th`).map((i, val) => {
             let temp = $j.trim($j(val).html().replace(/<a( |>).*?<\/a>/gi, ""))
             return temp.length > 0 ? temp : undefined
         }).get()
         $j("#preDefinedList li input[type='button']").map((i, val) => {
             if ($j.inArray($j(val).val(), colNames) != -1) {
                 $j(val).parent().hide()
             } else {
                 $j(val).parent().show()
             }
         }).get()
     }

     function AddRow(table) {
         let rowCount = $j(table).rowcount() + 1;
         let newRow;
         $j(table + ' thead tr').find('th').each(function () {
             newRow += '<td contenteditable></td>'
         });
         $j(table + ' tbody').append('<tr>' + newRow + '</tr>')
         setTableOntology(table)
     }

     $j.fn.columnCount = function () {
         return $j('th', $j(this).find('thead')).length;
     };

     $j.fn.rowcount = function () {
         return $j('tr', $j(this).find('tbody')).length;
     };

     function AddCell(table, newColName) {
         let colCount = $j(table).columnCount() + 1;
         if (newColName.length < 3) {
             alert("Please enter a valid column name!");
             return;
         }
         if ($j(table).find('thead tr').find('th').length == 0)
             $j(table).find('thead tr').append('<th>' + newColName + '</th>')
         else
             $j(table).find('thead tr').find('th').eq(colCount - 2).after('<th>' + newColName + '</th>');
         $j(table).find('tr').each(function () {
             $j(this).find('td').eq(colCount - 2).after('<td contenteditable></td>');
         });
     }

     function update_iotable(std_id, sample_id, content) {
         $j.ajax({
             type: 'PATCH',
             cache: false,
             url: pid + '/update_iotable',
             data: {
                 std_id,
                 sample_id,
                 content
             },
             success: result => {
                 alert('Content saved successfully!')
             }
         })
     }

     function update_method(std_id, asy_id, content) {
         $j.ajax({
             type: 'PATCH',
             cache: false,
             url: pid + '/update_method',
             data: {
                 std_id,
                 asy_id,
                 content
             },
             success: result => {
                 alert('Content saved successfully!')
             }
         })
     }

     $j("#btn_update_tables").on("click", () => {
         // Add data-term to the col name to be extracted later
         // TO-DO: Search col name in acSource array instead! (if match then apply data-term="generated-xxx")

         let cols = []
         $j.each($j(".tableInpOut thead tr th"), (key, val) => {
             cols.push($j(val).html())
             if ($j(val).attr('data-term'))
                 $j(val).text($j(val).text() + '%' + $j(val).attr('data-term'))
         })
         let r = JSON.stringify(get_table_JSON(".tableInpOut"))
         $j.each($j(".tableInpOut thead tr th"), (key, val) => {
             $j(val).html(cols[key])
         })
         //  let content = $j('.tableInpOut').prop('outerHTML')
         let std_id = $j("#text_content").attr('data-selected').split('_')[0]
         let sample_id = $j("#text_content").attr('data-selected').split('_')[1]
         update_iotable(std_id, sample_id, r)
     })

     function applyOntology(tblClass, column, term) {
         //console.log("Applying ontology...")
         if (term.match("^custom")) {
             $j(`${tblClass} tbody tr td:nth-child(${column})`).autocomplete({
                 source: acSource[term.split('-')[1]],
                 mustMatch: true
             });
         } else if (term.match("^generated")) {
             let tds = $j(`${tblClass} tbody tr td:nth-child(${column})`)
             $j.each(tds, (key, val) => {
                 if (!$j(tds[key]).attr("applied")) {
                     $j(tds[key]).attr("applied", true)
                     let temp = $j(tds[key]).text()
                     $j(tds[key]).empty()
                     $j(tds[key]).append(appendDropDown(GSource[term.split('-')[1]]))
                     $j(tds[key]).children(':first').val(temp)
                 }
             })

         } else {
             $j.ajax({
                 type: 'GET',
                 url: `http://193.190.85.155:53006/ontology/${term}`,
                 cache: true,
                 success: s => {
                     $j(`${tblClass} tbody tr td:nth-child(${column})`).autocomplete({
                         source: eval(s),
                         mustMatch: true
                     });
                     $j(`${tblClass} thead tr th:nth-child(${column})`).data("term", term);
                 }
             })
         }
     }

     function setTableOntology(tblClass) {
         let cols = $j(`${tblClass} thead tr th`)
         for (let i = 0; i < cols.length; i++) {
             let term = $j(`${tblClass} thead tr th:nth-child(${i+1})`).data("term") || undefined
             if (term)
                 applyOntology(tblClass, i + 1, term)
         }
     }

     $j("#sample_add_row").on("click", () => {
         AddRow('.tableInpOut')
         // Add the remove button
         let action =
             "<a href='' onclick='remove_tr(event)' class=''> <span class='glyphicon glyphicon-trash'></span></a>"
         $j('.tableInpOut').each(function (i, t) {
             if ($j(t).find('thead tr th:last').attr("class") != 'rem')
                 $j(t).children('thead').children('tr').append(
                     "<th class='rem' style='width:50px;'></th>")
             let headerCount = $j(t).find('thead tr th').length
             $j(t).children('tbody').children('tr').each(function (i, g) {

                 if ($j(g).find('td').length == headerCount) {
                     $j(g).find('td:last').html(action)
                     $j(g).find('td:last').attr("contenteditable", "false")
                 } else
                     $j(g).append(
                         `<td class='rem' rowspan=${$j(g).children('td:first').attr("rowspan")}>${action}</td>`
                     )
             })
         })


     })

     $j("#sample_add_col").on("click", () => {
         showPreDefinedCols(event, '.tableInpOut', 2)
     })

     function appendDropDown(items) {
         if (!items) return
         var select = "<select class='form-control'>"
         $j.each(items, (key, val) => {
             select += `<option>${val}</option>`
         })
         select += "</select>"
         return select
     }
 </script>